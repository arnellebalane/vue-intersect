{"version":3,"file":"vue-intersect.mjs","sources":["../node_modules/intersection-observer/intersection-observer.js","../vue-intersect.js"],"sourcesContent":["/**\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\n *\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\n *\n */\n\n(function(window, document) {\n'use strict';\n\n\n// Exits early if all IntersectionObserver and IntersectionObserverEntry\n// features are natively supported.\nif ('IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\n\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\n      'isIntersecting', {\n      get: function () {\n        return this.intersectionRatio > 0;\n      }\n    });\n  }\n  return;\n}\n\n\n/**\n * An IntersectionObserver registry. This registry exists to hold a strong\n * reference to IntersectionObserver instances currently observering a target\n * element. Without this registry, instances without another reference may be\n * garbage collected.\n */\nvar registry = [];\n\n\n/**\n * Creates the global IntersectionObserverEntry constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\n * @param {Object} entry A dictionary of instance properties.\n * @constructor\n */\nfunction IntersectionObserverEntry(entry) {\n  this.time = entry.time;\n  this.target = entry.target;\n  this.rootBounds = entry.rootBounds;\n  this.boundingClientRect = entry.boundingClientRect;\n  this.intersectionRect = entry.intersectionRect || getEmptyRect();\n  this.isIntersecting = !!entry.intersectionRect;\n\n  // Calculates the intersection ratio.\n  var targetRect = this.boundingClientRect;\n  var targetArea = targetRect.width * targetRect.height;\n  var intersectionRect = this.intersectionRect;\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\n\n  // Sets intersection ratio.\n  if (targetArea) {\n    this.intersectionRatio = intersectionArea / targetArea;\n  } else {\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\n  }\n}\n\n\n/**\n * Creates the global IntersectionObserver constructor.\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\n * @param {Function} callback The function to be invoked after intersection\n *     changes have queued. The function is not invoked if the queue has\n *     been emptied by calling the `takeRecords` method.\n * @param {Object=} opt_options Optional configuration options.\n * @constructor\n */\nfunction IntersectionObserver(callback, opt_options) {\n\n  var options = opt_options || {};\n\n  if (typeof callback != 'function') {\n    throw new Error('callback must be a function');\n  }\n\n  if (options.root && options.root.nodeType != 1) {\n    throw new Error('root must be an Element');\n  }\n\n  // Binds and throttles `this._checkForIntersections`.\n  this._checkForIntersections = throttle(\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\n\n  // Private properties.\n  this._callback = callback;\n  this._observationTargets = [];\n  this._queuedEntries = [];\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\n\n  // Public properties.\n  this.thresholds = this._initThresholds(options.threshold);\n  this.root = options.root || null;\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\n    return margin.value + margin.unit;\n  }).join(' ');\n}\n\n\n/**\n * The minimum interval within which the document will be checked for\n * intersection changes.\n */\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\n\n\n/**\n * The frequency in which the polyfill polls for intersection changes.\n * this can be updated on a per instance basis and must be set prior to\n * calling `observe` on the first target.\n */\nIntersectionObserver.prototype.POLL_INTERVAL = null;\n\n/**\n * Use a mutation observer on the root element\n * to detect intersection changes.\n */\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\n\n\n/**\n * Starts observing a target element for intersection changes based on\n * the thresholds values.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.observe = function(target) {\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\n    return item.element == target;\n  });\n\n  if (isTargetAlreadyObserved) {\n    return;\n  }\n\n  if (!(target && target.nodeType == 1)) {\n    throw new Error('target must be an Element');\n  }\n\n  this._registerInstance();\n  this._observationTargets.push({element: target, entry: null});\n  this._monitorIntersections();\n  this._checkForIntersections();\n};\n\n\n/**\n * Stops observing a target element for intersection changes.\n * @param {Element} target The DOM element to observe.\n */\nIntersectionObserver.prototype.unobserve = function(target) {\n  this._observationTargets =\n      this._observationTargets.filter(function(item) {\n\n    return item.element != target;\n  });\n  if (!this._observationTargets.length) {\n    this._unmonitorIntersections();\n    this._unregisterInstance();\n  }\n};\n\n\n/**\n * Stops observing all target elements for intersection changes.\n */\nIntersectionObserver.prototype.disconnect = function() {\n  this._observationTargets = [];\n  this._unmonitorIntersections();\n  this._unregisterInstance();\n};\n\n\n/**\n * Returns any queue entries that have not yet been reported to the\n * callback and clears the queue. This can be used in conjunction with the\n * callback to obtain the absolute most up-to-date intersection information.\n * @return {Array} The currently queued entries.\n */\nIntersectionObserver.prototype.takeRecords = function() {\n  var records = this._queuedEntries.slice();\n  this._queuedEntries = [];\n  return records;\n};\n\n\n/**\n * Accepts the threshold value from the user configuration object and\n * returns a sorted array of unique threshold values. If a value is not\n * between 0 and 1 and error is thrown.\n * @private\n * @param {Array|number=} opt_threshold An optional threshold value or\n *     a list of threshold values, defaulting to [0].\n * @return {Array} A sorted list of unique and valid threshold values.\n */\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\n  var threshold = opt_threshold || [0];\n  if (!Array.isArray(threshold)) threshold = [threshold];\n\n  return threshold.sort().filter(function(t, i, a) {\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\n    }\n    return t !== a[i - 1];\n  });\n};\n\n\n/**\n * Accepts the rootMargin value from the user configuration object\n * and returns an array of the four margin values as an object containing\n * the value and unit properties. If any of the values are not properly\n * formatted or use a unit other than px or %, and error is thrown.\n * @private\n * @param {string=} opt_rootMargin An optional rootMargin value,\n *     defaulting to '0px'.\n * @return {Array<Object>} An array of margin objects with the keys\n *     value and unit.\n */\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\n  var marginString = opt_rootMargin || '0px';\n  var margins = marginString.split(/\\s+/).map(function(margin) {\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\n    if (!parts) {\n      throw new Error('rootMargin must be specified in pixels or percent');\n    }\n    return {value: parseFloat(parts[1]), unit: parts[2]};\n  });\n\n  // Handles shorthand.\n  margins[1] = margins[1] || margins[0];\n  margins[2] = margins[2] || margins[0];\n  margins[3] = margins[3] || margins[1];\n\n  return margins;\n};\n\n\n/**\n * Starts polling for intersection changes if the polling is not already\n * happening, and if the page's visibilty state is visible.\n * @private\n */\nIntersectionObserver.prototype._monitorIntersections = function() {\n  if (!this._monitoringIntersections) {\n    this._monitoringIntersections = true;\n\n    // If a poll interval is set, use polling instead of listening to\n    // resize and scroll events or DOM mutations.\n    if (this.POLL_INTERVAL) {\n      this._monitoringInterval = setInterval(\n          this._checkForIntersections, this.POLL_INTERVAL);\n    }\n    else {\n      addEvent(window, 'resize', this._checkForIntersections, true);\n      addEvent(document, 'scroll', this._checkForIntersections, true);\n\n      if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in window) {\n        this._domObserver = new MutationObserver(this._checkForIntersections);\n        this._domObserver.observe(document, {\n          attributes: true,\n          childList: true,\n          characterData: true,\n          subtree: true\n        });\n      }\n    }\n  }\n};\n\n\n/**\n * Stops polling for intersection changes.\n * @private\n */\nIntersectionObserver.prototype._unmonitorIntersections = function() {\n  if (this._monitoringIntersections) {\n    this._monitoringIntersections = false;\n\n    clearInterval(this._monitoringInterval);\n    this._monitoringInterval = null;\n\n    removeEvent(window, 'resize', this._checkForIntersections, true);\n    removeEvent(document, 'scroll', this._checkForIntersections, true);\n\n    if (this._domObserver) {\n      this._domObserver.disconnect();\n      this._domObserver = null;\n    }\n  }\n};\n\n\n/**\n * Scans each observation target for intersection changes and adds them\n * to the internal entries queue. If new entries are found, it\n * schedules the callback to be invoked.\n * @private\n */\nIntersectionObserver.prototype._checkForIntersections = function() {\n  var rootIsInDom = this._rootIsInDom();\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\n\n  this._observationTargets.forEach(function(item) {\n    var target = item.element;\n    var targetRect = getBoundingClientRect(target);\n    var rootContainsTarget = this._rootContainsTarget(target);\n    var oldEntry = item.entry;\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\n        this._computeTargetAndRootIntersection(target, rootRect);\n\n    var newEntry = item.entry = new IntersectionObserverEntry({\n      time: now(),\n      target: target,\n      boundingClientRect: targetRect,\n      rootBounds: rootRect,\n      intersectionRect: intersectionRect\n    });\n\n    if (!oldEntry) {\n      this._queuedEntries.push(newEntry);\n    } else if (rootIsInDom && rootContainsTarget) {\n      // If the new entry intersection ratio has crossed any of the\n      // thresholds, add a new entry.\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\n        this._queuedEntries.push(newEntry);\n      }\n    } else {\n      // If the root is not in the DOM or target is not contained within\n      // root but the previous entry for this target had an intersection,\n      // add a new record indicating removal.\n      if (oldEntry && oldEntry.isIntersecting) {\n        this._queuedEntries.push(newEntry);\n      }\n    }\n  }, this);\n\n  if (this._queuedEntries.length) {\n    this._callback(this.takeRecords(), this);\n  }\n};\n\n\n/**\n * Accepts a target and root rect computes the intersection between then\n * following the algorithm in the spec.\n * TODO(philipwalton): at this time clip-path is not considered.\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\n * @param {Element} target The target DOM element\n * @param {Object} rootRect The bounding rect of the root after being\n *     expanded by the rootMargin value.\n * @return {?Object} The final intersection rect object or undefined if no\n *     intersection is found.\n * @private\n */\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\n    function(target, rootRect) {\n\n  // If the element isn't displayed, an intersection can't happen.\n  if (window.getComputedStyle(target).display == 'none') return;\n\n  var targetRect = getBoundingClientRect(target);\n  var intersectionRect = targetRect;\n  var parent = getParentNode(target);\n  var atRoot = false;\n\n  while (!atRoot) {\n    var parentRect = null;\n    var parentComputedStyle = parent.nodeType == 1 ?\n        window.getComputedStyle(parent) : {};\n\n    // If the parent isn't displayed, an intersection can't happen.\n    if (parentComputedStyle.display == 'none') return;\n\n    if (parent == this.root || parent == document) {\n      atRoot = true;\n      parentRect = rootRect;\n    } else {\n      // If the element has a non-visible overflow, and it's not the <body>\n      // or <html> element, update the intersection rect.\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\n      // the document rect, so no need to compute a new intersection.\n      if (parent != document.body &&\n          parent != document.documentElement &&\n          parentComputedStyle.overflow != 'visible') {\n        parentRect = getBoundingClientRect(parent);\n      }\n    }\n\n    // If either of the above conditionals set a new parentRect,\n    // calculate new intersection data.\n    if (parentRect) {\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\n\n      if (!intersectionRect) break;\n    }\n    parent = getParentNode(parent);\n  }\n  return intersectionRect;\n};\n\n\n/**\n * Returns the root rect after being expanded by the rootMargin value.\n * @return {Object} The expanded root rect.\n * @private\n */\nIntersectionObserver.prototype._getRootRect = function() {\n  var rootRect;\n  if (this.root) {\n    rootRect = getBoundingClientRect(this.root);\n  } else {\n    // Use <html>/<body> instead of window since scroll bars affect size.\n    var html = document.documentElement;\n    var body = document.body;\n    rootRect = {\n      top: 0,\n      left: 0,\n      right: html.clientWidth || body.clientWidth,\n      width: html.clientWidth || body.clientWidth,\n      bottom: html.clientHeight || body.clientHeight,\n      height: html.clientHeight || body.clientHeight\n    };\n  }\n  return this._expandRectByRootMargin(rootRect);\n};\n\n\n/**\n * Accepts a rect and expands it by the rootMargin value.\n * @param {Object} rect The rect object to expand.\n * @return {Object} The expanded rect.\n * @private\n */\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\n  var margins = this._rootMarginValues.map(function(margin, i) {\n    return margin.unit == 'px' ? margin.value :\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\n  });\n  var newRect = {\n    top: rect.top - margins[0],\n    right: rect.right + margins[1],\n    bottom: rect.bottom + margins[2],\n    left: rect.left - margins[3]\n  };\n  newRect.width = newRect.right - newRect.left;\n  newRect.height = newRect.bottom - newRect.top;\n\n  return newRect;\n};\n\n\n/**\n * Accepts an old and new entry and returns true if at least one of the\n * threshold values has been crossed.\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\n *    particular target element or null if no previous entry exists.\n * @param {IntersectionObserverEntry} newEntry The current entry for a\n *    particular target element.\n * @return {boolean} Returns true if a any threshold has been crossed.\n * @private\n */\nIntersectionObserver.prototype._hasCrossedThreshold =\n    function(oldEntry, newEntry) {\n\n  // To make comparing easier, an entry that has a ratio of 0\n  // but does not actually intersect is given a value of -1\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\n      oldEntry.intersectionRatio || 0 : -1;\n  var newRatio = newEntry.isIntersecting ?\n      newEntry.intersectionRatio || 0 : -1;\n\n  // Ignore unchanged ratios\n  if (oldRatio === newRatio) return;\n\n  for (var i = 0; i < this.thresholds.length; i++) {\n    var threshold = this.thresholds[i];\n\n    // Return true if an entry matches a threshold or if the new ratio\n    // and the old ratio are on the opposite sides of a threshold.\n    if (threshold == oldRatio || threshold == newRatio ||\n        threshold < oldRatio !== threshold < newRatio) {\n      return true;\n    }\n  }\n};\n\n\n/**\n * Returns whether or not the root element is an element and is in the DOM.\n * @return {boolean} True if the root element is an element and is in the DOM.\n * @private\n */\nIntersectionObserver.prototype._rootIsInDom = function() {\n  return !this.root || containsDeep(document, this.root);\n};\n\n\n/**\n * Returns whether or not the target element is a child of root.\n * @param {Element} target The target element to check.\n * @return {boolean} True if the target element is a child of root.\n * @private\n */\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\n  return containsDeep(this.root || document, target);\n};\n\n\n/**\n * Adds the instance to the global IntersectionObserver registry if it isn't\n * already present.\n * @private\n */\nIntersectionObserver.prototype._registerInstance = function() {\n  if (registry.indexOf(this) < 0) {\n    registry.push(this);\n  }\n};\n\n\n/**\n * Removes the instance from the global IntersectionObserver registry.\n * @private\n */\nIntersectionObserver.prototype._unregisterInstance = function() {\n  var index = registry.indexOf(this);\n  if (index != -1) registry.splice(index, 1);\n};\n\n\n/**\n * Returns the result of the performance.now() method or null in browsers\n * that don't support the API.\n * @return {number} The elapsed time since the page was requested.\n */\nfunction now() {\n  return window.performance && performance.now && performance.now();\n}\n\n\n/**\n * Throttles a function and delays its executiong, so it's only called at most\n * once within a given time period.\n * @param {Function} fn The function to throttle.\n * @param {number} timeout The amount of time that must pass before the\n *     function can be called again.\n * @return {Function} The throttled function.\n */\nfunction throttle(fn, timeout) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      timer = setTimeout(function() {\n        fn();\n        timer = null;\n      }, timeout);\n    }\n  };\n}\n\n\n/**\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\n * @param {Node} node The DOM node to add the event handler to.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to add.\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\n *     phase. Note: this only works in modern browsers.\n */\nfunction addEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.addEventListener == 'function') {\n    node.addEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.attachEvent == 'function') {\n    node.attachEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Removes a previously added event handler from a DOM node.\n * @param {Node} node The DOM node to remove the event handler from.\n * @param {string} event The event name.\n * @param {Function} fn The event handler to remove.\n * @param {boolean} opt_useCapture If the event handler was added with this\n *     flag set to true, it should be set to true here in order to remove it.\n */\nfunction removeEvent(node, event, fn, opt_useCapture) {\n  if (typeof node.removeEventListener == 'function') {\n    node.removeEventListener(event, fn, opt_useCapture || false);\n  }\n  else if (typeof node.detatchEvent == 'function') {\n    node.detatchEvent('on' + event, fn);\n  }\n}\n\n\n/**\n * Returns the intersection between two rect objects.\n * @param {Object} rect1 The first rect.\n * @param {Object} rect2 The second rect.\n * @return {?Object} The intersection rect or undefined if no intersection\n *     is found.\n */\nfunction computeRectIntersection(rect1, rect2) {\n  var top = Math.max(rect1.top, rect2.top);\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\n  var left = Math.max(rect1.left, rect2.left);\n  var right = Math.min(rect1.right, rect2.right);\n  var width = right - left;\n  var height = bottom - top;\n\n  return (width >= 0 && height >= 0) && {\n    top: top,\n    bottom: bottom,\n    left: left,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n\n\n/**\n * Shims the native getBoundingClientRect for compatibility with older IE.\n * @param {Element} el The element whose bounding rect to get.\n * @return {Object} The (possibly shimmed) rect of the element.\n */\nfunction getBoundingClientRect(el) {\n  var rect;\n\n  try {\n    rect = el.getBoundingClientRect();\n  } catch (err) {\n    // Ignore Windows 7 IE11 \"Unspecified error\"\n    // https://github.com/w3c/IntersectionObserver/pull/205\n  }\n\n  if (!rect) return getEmptyRect();\n\n  // Older IE\n  if (!(rect.width && rect.height)) {\n    rect = {\n      top: rect.top,\n      right: rect.right,\n      bottom: rect.bottom,\n      left: rect.left,\n      width: rect.right - rect.left,\n      height: rect.bottom - rect.top\n    };\n  }\n  return rect;\n}\n\n\n/**\n * Returns an empty rect object. An empty rect is returned when an element\n * is not in the DOM.\n * @return {Object} The empty rect.\n */\nfunction getEmptyRect() {\n  return {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    width: 0,\n    height: 0\n  };\n}\n\n/**\n * Checks to see if a parent element contains a child elemnt (including inside\n * shadow DOM).\n * @param {Node} parent The parent element.\n * @param {Node} child The child element.\n * @return {boolean} True if the parent node contains the child node.\n */\nfunction containsDeep(parent, child) {\n  var node = child;\n  while (node) {\n    if (node == parent) return true;\n\n    node = getParentNode(node);\n  }\n  return false;\n}\n\n\n/**\n * Gets the parent node of an element or its host element if the parent node\n * is a shadow root.\n * @param {Node} node The node whose parent to get.\n * @return {Node|null} The parent node or null if no parent exists.\n */\nfunction getParentNode(node) {\n  var parent = node.parentNode;\n\n  if (parent && parent.nodeType == 11 && parent.host) {\n    // If the parent is a shadow root, return the host element.\n    return parent.host;\n  }\n  return parent;\n}\n\n\n// Exposes the constructors globally.\nwindow.IntersectionObserver = IntersectionObserver;\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\n\n}(window, document));\n","import 'intersection-observer';\n\nconst defaultConfig = {\n    threshold: 0,\n    root: null,\n    rootMargin: '0px'\n};\n\nfunction except(object, keys) {\n    return Object.keys(object).reduce((reduced, key) => {\n        if (!keys.includes(key)) {\n            reduced[key] = object[key];\n        }\n        return reduced;\n    }, {});\n}\n\nfunction parseIntersectValue(value) {\n    return typeof value === 'function'\n        ? Object.assign({}, defaultConfig, { callback: value })\n        : Object.assign({}, defaultConfig, value);\n}\n\nexport default {\n    install(Vue, options) {\n        Vue.directive('intersect', {\n            inserted(el, {value}) {\n                const config = parseIntersectValue(value);\n\n                const observer = new IntersectionObserver(([entry]) => {\n                    config.callback(entry);\n                }, except(config, ['callback']));\n\n                observer.observe(el);\n            }\n        });\n    }\n};\n"],"names":["window","document","IntersectionObserverEntry","entry","this","time","target","rootBounds","boundingClientRect","intersectionRect","top","bottom","left","right","width","height","isIntersecting","targetRect","targetArea","intersectionRatio","IntersectionObserver","callback","opt_options","fn","timeout","timer","options","Error","root","nodeType","_checkForIntersections","bind","THROTTLE_TIMEOUT","setTimeout","_callback","_observationTargets","_queuedEntries","_rootMarginValues","_parseRootMargin","rootMargin","thresholds","_initThresholds","threshold","map","margin","value","unit","join","addEvent","node","event","opt_useCapture","addEventListener","attachEvent","removeEvent","removeEventListener","detatchEvent","getBoundingClientRect","el","rect","err","containsDeep","parent","child","getParentNode","parentNode","host","prototype","Object","defineProperty","get","POLL_INTERVAL","USE_MUTATION_OBSERVER","observe","some","item","element","_registerInstance","push","_monitorIntersections","unobserve","filter","length","_unmonitorIntersections","_unregisterInstance","disconnect","takeRecords","records","slice","opt_threshold","Array","isArray","sort","t","i","a","isNaN","opt_rootMargin","margins","split","parts","exec","parseFloat","_monitoringIntersections","_monitoringInterval","setInterval","_domObserver","MutationObserver","attributes","childList","characterData","subtree","clearInterval","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","forEach","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","newEntry","performance","now","_hasCrossedThreshold","getComputedStyle","display","rect1","rect2","atRoot","parentRect","parentComputedStyle","body","documentElement","overflow","Math","max","min","html","clientWidth","clientHeight","_expandRectByRootMargin","newRect","oldRatio","newRatio","const","defaultConfig","install","Vue","directive","inserted","ref","object","keys","config","assign","parseIntersectValue","reduce","reduced","key","includes"],"mappings":"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"}