{"version":3,"file":"vue-intersect.umd.js","sources":["../vue-intersect.js"],"sourcesContent":["const defaultConfig = {\n    threshold: 0,\n    root: null,\n    rootMargin: '0px'\n};\n\nfunction except(object, keys) {\n    return Object.keys(object).reduce((reduced, key) => {\n        if (!keys.includes(key)) {\n            reduced[key] = object[key];\n        }\n        return reduced;\n    }, {});\n}\n\nfunction parseIntersectValue(value) {\n    return typeof value === 'function'\n        ? Object.assign({}, defaultConfig, { callback: value })\n        : Object.assign({}, defaultConfig, value);\n}\n\nexport default {\n    install(Vue, options) {\n        Vue.directive('intersect', {\n            inserted(el, {value}) {\n                const config = parseIntersectValue(value);\n\n                const observer = new IntersectionObserver(([entry]) => {\n                    config.callback(entry);\n                }, except(config, ['callback']));\n\n                observer.observe(el);\n            }\n        });\n    }\n};\n"],"names":["const","defaultConfig","threshold","root","rootMargin","install","Vue","options","directive","inserted","el","ref","object","keys","config","value","Object","assign","callback","parseIntersectValue","IntersectionObserver","reduce","reduced","key","includes","observe"],"mappings":"2KAAAA,IAAMC,EAAgB,CAClBC,UAAW,EACXC,KAAM,KACNC,WAAY,aAkBD,CACXC,iBAAQC,EAAKC,GACTD,EAAIE,UAAU,YAAa,CACvBC,kBAASC,EAAIC,OAlBTC,EAAQC,EAmBFC,EAVtB,SAA6BC,GACzB,MAAwB,mBAAVA,EACRC,OAAOC,OAAO,GAAIhB,EAAe,CAAEiB,SAAUH,IAC7CC,OAAOC,OAAO,GAAIhB,EAAec,GAOZI,UAEE,IAAIC,8BAAsBT,GACvCG,EAAOI,iBAtBXN,EAuBUE,EAvBFD,EAuBU,CAAC,YAtBxBG,OAAOH,KAAKD,GAAQS,gBAAQC,EAASC,GAIxC,OAHKV,EAAKW,SAASD,KACfD,EAAQC,GAAOX,EAAOW,IAEnBD,GACR,MAmBkBG,QAAQf"}